<h1>Spotify Web Playback SDK</h1>
  <input type ="text" placeholder="1 2 3.." id="txtSearch" />
  <input type ="button" value="Search" id="btnSearch"/>
  <script src="https://sdk.scdn.co/spotify-player.js"></script>
  <script>
      async function login()
    {
     const loginInfo =  {  
	  "username": "jcorm714",
	  "password": "PKeK632e"
        };
        let url = 'https://api.hooktheory.com/v1/users/auth'
        const resp = await fetch(url, {
            method: "POST",
            headers:{
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(loginInfo)
        })
        data = await resp.json();
        console.log(data)
        return data;
    }

    async function search()
    {
        data = login();
        let chords = document.querySelector("#txtSearch").value;
        chords = chords.split(" ").join(",")
        debugger;
        let url = 'https://api.hooktheory.com/v1/trends/songs?cp=4,1'
        const resp =  await fetch(url, {
            method: 'GET',
            headers:{
                'Content-Type' : 'application/json',
                'Authorization' : 'Bearer ' + data["activkey"]
            }
        })
        result = await resp.json();
        console.log(result)
        return result;
    }
    document.querySelector("#btnSearch").addEventListener("click", search)
  </script>
  <script>

      let params = new URLSearchParams(window.location.hash);
     

      window.onSpotifyWebPlaybackSDKReady = () => {
      debugger;
      const token = params.get("#access_token");
      const player = new Spotify.Player({
        name: 'Web Playback SDK Quick Start Player',
        getOAuthToken: cb => { cb(token); }
      });
      
      // Error handling
      player.addListener('initialization_error', ({ message }) => { console.error(message); });
          player.addListener('authentication_error', ({ message }) => {
              console.log(message);
            //alert(message);
            //window.location.href = "@Url.Action("Index", "Home")"
        })
      
      player.addListener('account_error', ({ message }) => { console.error(message); });
      player.addListener('playback_error', ({ message }) => { console.error(message); });

      // Playback status updates
      player.addListener('player_state_changed', state => { console.log(state); });

      // Ready
      player.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id);
      });

      // Not Ready
      player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
      });

      // Connect to the player!
      player.connect();
    };
  </script>

